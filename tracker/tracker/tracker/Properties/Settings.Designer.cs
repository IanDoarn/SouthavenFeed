//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ItemLookUp.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("vsbslgprd01.zmr.zimmer.com")]
        public string POSTGRES_HOST {
            get {
                return ((string)(this["POSTGRES_HOST"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("postgres")]
        public string POSTGRES_DATABASE {
            get {
                return ((string)(this["POSTGRES_DATABASE"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5432")]
        public string POSTGRES_PORT {
            get {
                return ((string)(this["POSTGRES_PORT"]));
            }
            set {
                this["POSTGRES_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("doarni")]
        public string POSTGRES_USERNAME {
            get {
                return ((string)(this["POSTGRES_USERNAME"]));
            }
            set {
                this["POSTGRES_USERNAME"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ZimmerBiomet")]
        public string POSTGRES_PASSWORD {
            get {
                return ((string)(this["POSTGRES_PASSWORD"]));
            }
            set {
                this["POSTGRES_PASSWORD"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10.201.207.188")]
        public string ORACLE_HOST {
            get {
                return ((string)(this["ORACLE_HOST"]));
            }
            set {
                this["ORACLE_HOST"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("smsprd")]
        public string ORACLE_SID {
            get {
                return ((string)(this["ORACLE_SID"]));
            }
            set {
                this["ORACLE_SID"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1521")]
        public string ORACLE_PORT {
            get {
                return ((string)(this["ORACLE_PORT"]));
            }
            set {
                this["ORACLE_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("logistics")]
        public string ORACLE_USERNAME {
            get {
                return ((string)(this["ORACLE_USERNAME"]));
            }
            set {
                this["ORACLE_USERNAME"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("log78gist")]
        public string ORACLE_PASSWORD {
            get {
                return ((string)(this["ORACLE_PASSWORD"]));
            }
            set {
                this["ORACLE_PASSWORD"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("WITH s0 AS (\r\n    SELECT DISTINCT\r\n      s.product_id,\r\n      pc.component_produc" +
            "t_id,\r\n      pc.quantity\r\n    FROM\r\n      SMS_WRITE.stock s\r\n      LEFT JOIN SMS" +
            "_WRITE.product_component pc ON s.product_id = pc.product_id\r\n    WHERE\r\n      st" +
            "ock_type IN (3, 4)\r\n      AND inventory_type = 3\r\n),\r\n\r\n    s1 AS (\r\n      SELEC" +
            "T\r\n        p.id              AS kit_product_id,\r\n        p.product_number  AS ki" +
            "t_product_number,\r\n        p.edi_number      AS kit_edi,\r\n        p.description " +
            "    AS kit_description,\r\n        p2.product_number AS component_product_number,\r" +
            "\n        p2.id             AS component_prod_id,\r\n        p2.EDI_NUMBER     AS c" +
            "omponent_edi_number,\r\n        p2.description    AS component_description,\r\n     " +
            "   s0.quantity       AS component_quantity_in_kit\r\n      FROM\r\n        s0\r\n     " +
            "   LEFT JOIN SMS_WRITE.product p ON s0.product_id = p.id\r\n        LEFT JOIN SMS_" +
            "WRITE.product p2 ON s0.component_product_id = p2.id\r\n      WHERE\r\n        p.prod" +
            "uct_number NOT LIKE \'ZPB%\'),\r\n\r\n    s5 AS (\r\n      SELECT\r\n        p2.product_nu" +
            "mber                             AS kit_prod_number,\r\n        ps.serial_number  " +
            "                            AS serial_number,\r\n        b.zone || \'-\' || b.positi" +
            "on || \'-\' || b.shelf AS kit_bin,\r\n        p.edi_number                          " +
            "        AS component_edi,\r\n        sum(s.quantity_available)                    " +
            " AS quantity_available,\r\n        pl.lot_number                                 A" +
            "S component_lot_number,\r\n        ztag.TAG_NUMBER                               A" +
            "S component_ztag\r\n      FROM\r\n        SMS_WRITE.stock s\r\n        LEFT JOIN SMS_W" +
            "RITE.product p ON s.product_id = p.id\r\n        LEFT JOIN SMS_WRITE.stock s2 ON s" +
            ".container_id = s2.id AND s.container_type = 2\r\n        LEFT JOIN SMS_WRITE.prod" +
            "uct p2 ON s2.product_id = p2.id\r\n        LEFT JOIN SMS_WRITE.product_serial ps O" +
            "N s2.serial_id = ps.id\r\n        LEFT JOIN SMS_WRITE.bin b ON s2.container_id = b" +
            ".id AND s2.container_type = 1\r\n        LEFT JOIN SMS_WRITE.PRODUCT_LOT pl ON s.L" +
            "OT_ID = pl.ID\r\n        LEFT JOIN SMS_WRITE.RFID_TAG ztag ON ztag.PRODUCT_LOT_ID " +
            "= s.LOT_ID AND ztag.LAST_KNOWN_CONTAINER_TYPE = 2\r\n      WHERE\r\n        s.locati" +
            "on_type = 1\r\n        AND s.location_id = 370\r\n        AND s.stock_type = 2\r\n    " +
            "    AND s.container_type = 2\r\n        AND p2.product_number IS NOT NULL\r\n       " +
            " AND ztag.LAST_KNOWN_CONTAINER_ID = s.CONTAINER_ID\r\n      GROUP BY\r\n        ztag" +
            ".TAG_NUMBER,\r\n        pl.lot_number,\r\n        p2.product_number,\r\n        ps.ser" +
            "ial_number,\r\n        b.zone || \'-\' || b.position || \'-\' || b.shelf,\r\n        p.e" +
            "di_number),\r\n\r\n    s7 AS (\r\n      SELECT DISTINCT\r\n        p.product_number AS k" +
            "it_product_number,\r\n        ps.serial_number,\r\n        s.HOLD_REASON,\r\n        s" +
            ".HOLD_NOTE\r\n      FROM\r\n        SMS_WRITE.stock s\r\n        LEFT JOIN SMS_WRITE.p" +
            "roduct p ON s.product_id = p.id\r\n        LEFT JOIN SMS_WRITE.product_serial ps O" +
            "N ps.id = s.serial_id\r\n        LEFT JOIN SMS_WRITE.bin b ON b.id = s.container_i" +
            "d AND s.container_type = 1\r\n      WHERE\r\n        s.inventory_type = 3\r\n        A" +
            "ND s.QUANTITY_RESERVED < 1\r\n        AND s.stock_type IN (3, 4)\r\n        AND s.lo" +
            "cation_type = 1\r\n        AND s.location_id = 370\r\n        AND b.zone LIKE \'G%\')," +
            "\r\n\r\n    s9 AS (\r\n      SELECT\r\n        s1.kit_product_id,\r\n        s1.kit_produc" +
            "t_number,\r\n        s1.kit_edi,\r\n        s1.kit_description,\r\n        s7.serial_n" +
            "umber,\r\n        s1.component_product_number,\r\n        s1.component_prod_id,\r\n   " +
            "     s1.component_edi_number,\r\n        s1.component_description,\r\n        s1.com" +
            "ponent_quantity_in_kit,\r\n        s7.HOLD_REASON,\r\n        s7.HOLD_NOTE\r\n      FR" +
            "OM\r\n        s1\r\n        LEFT JOIN s7 ON s1.kit_product_number = s7.kit_product_n" +
            "umber),\r\n    wrapup AS (\r\n      SELECT\r\n        s9.kit_product_id               " +
            "                         AS KIT_PRODUCT_ID,\r\n        \'Z-\' || s9.kit_product_id |" +
            "| \'-\' || s9.SERIAL_NUMBER     AS KIT_BARCODE,\r\n        s9.kit_product_number    " +
            "                                AS KIT_PRODUCT_NUMBER,\r\n        s9.kit_edi      " +
            "                                         AS KIT_EDI_NUMBER,\r\n        s9.kit_desc" +
            "ription                                       AS KIT_DESCRIPTION,\r\n        s9.se" +
            "rial_number                                         AS KIT_SERIAL_NUMBER,\r\n     " +
            "   s9.component_product_number                              AS COMPONENT_PRODUCT" +
            "_NUMBER,\r\n        s9.component_prod_id                                     AS CO" +
            "MPONENT_PRODUCT_ID,\r\n        coalesce(s5.component_lot_number, NULL)            " +
            "      AS COMPONENT_LOT_NUMBER,\r\n        s5.component_ztag                       " +
            "                 AS COMPONENT_ZTAG,\r\n        s9.component_description           " +
            "                      AS COMPONENT_DESCRIPTION,\r\n        s9.component_quantity_i" +
            "n_kit                             AS COMPONENT_QUANTITY_IN_KIT_STD,\r\n        coa" +
            "lesce(s5.quantity_available, 0)                       AS QTY_IN_KIT,\r\n        su" +
            "m(s9.component_quantity_in_kit - coalesce(s5.quantity_available, 0))\r\n        OV" +
            "ER (\r\n          PARTITION BY s9.kit_product_number, s9.serial_number ) AS PIECES" +
            "_MISSING,\r\n        s9.HOLD_REASON,\r\n        s9.HOLD_NOTE\r\n      FROM\r\n        s9" +
            "\r\n        LEFT JOIN s5 ON s9.kit_product_number = s5.kit_prod_number AND s9.seri" +
            "al_number = s5.serial_number AND\r\n                        s9.component_edi_numbe" +
            "r = s5.component_edi\r\n      WHERE\r\n        s9.kit_product_number = \'{0}\'\r\n      " +
            "  AND s9.SERIAL_NUMBER = {1}\r\n      GROUP BY\r\n        s9.HOLD_REASON,\r\n        s" +
            "9.HOLD_NOTE,\r\n        s5.component_ztag,\r\n        s9.kit_product_id,\r\n        s9" +
            ".SERIAL_NUMBER,\r\n        s9.kit_product_number,\r\n        s9.kit_description,\r\n  " +
            "      s9.kit_edi,\r\n        s9.component_edi_number,\r\n        s9.component_quanti" +
            "ty_in_kit,\r\n        s9.component_description,\r\n        s9.component_prod_id,\r\n  " +
            "      s9.component_product_number,\r\n        s5.component_lot_number,\r\n        s5" +
            ".quantity_available\r\n      ORDER BY\r\n        s9.SERIAL_NUMBER,\r\n        s9.compo" +
            "nent_product_number\r\n  )\r\nSELECT DISTINCT\r\n  KIT_PRODUCT_ID,\r\n  KIT_BARCODE,\r\n  " +
            "KIT_PRODUCT_NUMBER,\r\n  KIT_DESCRIPTION,\r\n  KIT_SERIAL_NUMBER,\r\n  COMPONENT_PRODU" +
            "CT_ID,\r\n  COMPONENT_PRODUCT_NUMBER,\r\n  COMPONENT_DESCRIPTION,\r\n  COMPONENT_QUANT" +
            "ITY_IN_KIT_STD,\r\n  QTY_IN_KIT,\r\n  PIECES_MISSING,\r\n  HOLD_NOTE,\r\n  HOLD_REASON,\r" +
            "\n  CASE\r\n  WHEN HOLD_REASON = 1\r\n    THEN \'CORPORATE_HOLD\'\r\n  WHEN HOLD_REASON =" +
            " 2\r\n    THEN \'AWAITING_QC_CHECK\'\r\n  WHEN HOLD_REASON = 3\r\n    THEN \'INVENTORY_ST" +
            "AGING\'\r\n  WHEN HOLD_REASON = 4\r\n    THEN \'MISSING_ITEMS\'\r\n  WHEN HOLD_REASON = 5" +
            "\r\n    THEN \'PICK_SHORTAGE\'\r\n  WHEN HOLD_REASON = 6\r\n    THEN \'CYCLE_COUNT_IN_PRO" +
            "GRESS\'\r\n  WHEN HOLD_REASON = 7\r\n    THEN \'NOT_FOUND_DURING_CYCLE_COUNT\'\r\n  END A" +
            "S                     HOLD_REASON_DESCRIPTION\r\n\r\nFROM\r\n  wrapup\r\nWHERE\r\n  HOLD_R" +
            "EASON = 0\r\nGROUP BY\r\n  HOLD_NOTE,\r\n  HOLD_REASON,\r\n  KIT_PRODUCT_ID,\r\n  KIT_BARC" +
            "ODE,\r\n  KIT_PRODUCT_NUMBER,\r\n  KIT_DESCRIPTION,\r\n  KIT_SERIAL_NUMBER,\r\n  COMPONE" +
            "NT_PRODUCT_ID,\r\n  COMPONENT_PRODUCT_NUMBER,\r\n  COMPONENT_DESCRIPTION,\r\n  COMPONE" +
            "NT_LOT_NUMBER,\r\n  COMPONENT_QUANTITY_IN_KIT_STD,\r\n  QTY_IN_KIT,\r\n  PIECES_MISSIN" +
            "G\r\nORDER BY\r\n  PIECES_MISSING ASC")]
        public string ORACLE_INVALID_KIT_QUERY {
            get {
                return ((string)(this["ORACLE_INVALID_KIT_QUERY"]));
            }
            set {
                this["ORACLE_INVALID_KIT_QUERY"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"WITH s14 AS (
    SELECT
      p.product_number,
      p.id,
      ps.serial_number,
      CASE WHEN stock_type = 3
        THEN sum(s.quantity_on_hand) END AS Valid,
      CASE WHEN stock_type = 4
        THEN sum(s.quantity_on_hand) END AS Invalid
    FROM
      SMS_WRITE.stock s
      LEFT JOIN SMS_WRITE.product p ON s.product_id = p.id
      LEFT JOIN SMS_WRITE.bin b ON b.id = s.container_id AND s.container_type = 1
      LEFT JOIN SMS_WRITE.product_serial ps on s.serial_id = ps.id
    WHERE
      s.inventory_type = 3
      AND s.QUANTITY_RESERVED = 0
      AND stock_type IN (3, 4)
      AND s.location_id = 370
      AND s.location_type = 1
      AND b.zone LIKE 'G%'
      AND s.HOLD_REASON = 0
    GROUP BY
      p.id, p.product_number, s.stock_type, ps.serial_number),

    s15 AS ( --combines valid, invalid into one row SH
      SELECT
        id,
        product_number,
        serial_number,
        coalesce(sum(valid), 0)   AS valid,
        coalesce(sum(invalid), 0) AS invalid
      FROM
        s14
      GROUP BY
        id, product_number, serial_number)

SELECT
  'Z-' || id || '-' || serial_number as barcode
FROM
  s15
WHERE
  product_number = '{0}'
  AND invalid > 0")]
        public string ORACLE_INVALID_BARCODES_QUERY {
            get {
                return ((string)(this["ORACLE_INVALID_BARCODES_QUERY"]));
            }
            set {
                this["ORACLE_INVALID_BARCODES_QUERY"] = value;
            }
        }
    }
}
